{
    "patch": "--- a/main.py\n+++ b/main.py\n@@ -1,6 +1,7 @@\n #!/usr/bin/env python3\n from pdb import run\n import pprint\n import random\n import time\n+import argparse\n from InquirerPy.resolver import prompt\n from InquirerPy import inquirer as inquirer\n import tempfile\n import os\n@@ -12,6 +13,7 @@\n import google.generativeai as genai\n from google.generativeai.types import HarmCategory, HarmBlockThreshold\n \n client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n genai.configure(api_key=os.getenv(\"GEMINI_API_KEY\"))\n+ \n from typing import List\n \n import sys\n import threading\n@@ -103,6 +105,7 @@\n \n def main():\n     if len(sys.argv) < 2:\n         print(\"Usage: script.py <directory_path> [file1 file2 ...]\")\n         sys.exit(1)\n+    \n     parser = argparse.ArgumentParser(description='Process some files.')\n     parser.add_argument('directory_path', type=str, help='The path to the directory.')\n     parser.add_argument('files', nargs='*', help='Specific files to process.')\n+    parser.add_argument('-a', action='store_true', help='Force the agent to pass all manually inputted files for any agent on every step. This may be expensive.')\n     args = parser.parse_args()\n \n     directory_path = args.directory_path\n     if not os.path.exists(directory_path):\n         print(f\"Error: {directory_path} does not exist.\")\n         sys.exit(1)\n \n     validate_git_repo(directory_path)\n     ignored_files = get_gitignore_files(directory_path)\n \n     if args.files:\n         # Specific files are provided as arguments\n         file_paths = []\n         for file in args.files:\n             if os.path.isdir(file):\n                 file_paths.extend([os.path.join(file, f) for f in os.listdir(file)])\n             elif os.path.isfile(os.path.join(directory_path, file)) and os.path.join(directory_path, file) not in ignored_files:\n                 file_paths.append(os.path.join(directory_path, file))\n     else:\n         # No specific files provided, use all files not in .gitignore\n         file_paths = [\n             os.path.join(directory_path, file)\n             for file in os.listdir(directory_path)\n             if os.path.isfile(os.path.join(directory_path, file)) and os.path.join(directory_path, file) not in ignored_files]\n \n     selected_files = select_user_files(file_paths) if len(args.files) == 0 else file_paths\n     prompt = get_user_prompt()\n \n     agent_coordinator = Agent(name=\"agent_coordinator\", model=\"gpt-4o\", temperature=1)\n     agent_suggestor = Agent(name=\"agent_suggestor\", model=\"gpt-4o\", temperature=0.5)\n     agent_editor = Agent(name=\"agent_editor\", model=\"gpt-4o-mini\", temperature=0)\n     agent_checker = Agent(name=\"agent_checker\", model=\"gpt-4o-mini\", temperature=0)\n \n     coordinator = Coordinator(agent_coordinator,\n                               agents=[agent_suggestor, agent_editor, agent_checker],\n                               directory_path=directory_path)\n     coordinator.run(prompt, selected_files)\n \n     print(\"The refactoring was successful. The source code files have been updated with the patches.\")\n \n \n if __name__ == \"__main__\":\n     main()\n"
}
